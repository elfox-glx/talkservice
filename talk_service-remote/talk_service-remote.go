// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"linethrift"
)

var _ = linethrift.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "  void updateProfile(i32 reqSeq, Profile profile)")
  fmt.Fprintln(os.Stderr, "   fetchOperations(i64 localRev, i32 count)")
  fmt.Fprintln(os.Stderr, "  FriendRequestsInfo getRecentFriendRequests(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  GetChatsResponse getChats(GetChatsRequest request)")
  fmt.Fprintln(os.Stderr, "   getRecentMessages(string messageBoxId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "   getRecentMessagesV2(string messageBoxId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "  string getCountryWithRequestIp()")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncements(string chatRoomMid)")
  fmt.Fprintln(os.Stderr, "  Group getGroupWithoutMembers(string groupId)")
  fmt.Fprintln(os.Stderr, "  Group getGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "   getGroups( groupIds)")
  fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactSetting flag, string value)")
  fmt.Fprintln(os.Stderr, "  void updateGroup(i32 reqSeq, Group group)")
  fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
  fmt.Fprintln(os.Stderr, "   getLastE2EEPublicKeys(string chatMid)")
  fmt.Fprintln(os.Stderr, "  Ringtone getRingtone()")
  fmt.Fprintln(os.Stderr, "  E2EENegotiationResult negotiateE2EEPublicKey(string mid)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserid(string searchId)")
  fmt.Fprintln(os.Stderr, "  void clearRingtone(string oid)")
  fmt.Fprintln(os.Stderr, "  void setNotificationsEnabled(i32 reqSeq, MidType type, string target, bool enablement)")
  fmt.Fprintln(os.Stderr, "  DeleteOtherFromChatResponse deleteOtherFromChat(DeleteOtherFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "  InviteIntoChatResponse inviteIntoChat(InviteIntoChatRequest request)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationByTicketResponse acceptChatInvitationByTicket(AcceptChatInvitationByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  DeleteSelfFromChatResponse deleteSelfFromChat(DeleteSelfFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "  FindChatByTicketResponse findChatByTicket(FindChatByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  CancelChatInvitationResponse cancelChatInvitation(CancelChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationResponse acceptChatInvitation(AcceptChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  MessageBoxList getMessageBoxes(MessageBoxListRequest messageBoxListRequest, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  UpdateChatResponse updateChat(UpdateChatRequest request)")
  fmt.Fprintln(os.Stderr, "  ReissueChatTicketResponse reissueChatTicket(ReissueChatTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  GetAllChatMidsResponse getAllChatMids(GetAllChatMidsRequest request, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  RejectChatInvitationResponse rejectChatInvitation(RejectChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  CreateChatResponse createChat(CreateChatRequest request)")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncementsBulk( chatRoomMids, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData startUpdateVerification(string region, Carrier carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale, SIMInfo simInfo)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData startVerification(string region, Carrier carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale, SIMInfo simInfo, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData changeVerificationMethod(string sessionId, y30 method)")
  fmt.Fprintln(os.Stderr, "  GetEncryptedIdentityV3Response getEncryptedIdentityV3()")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getE2EEGroupSharedKey(i32 keyVersion, string chatMid, i32 groupKeyId)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey registerE2EEGroupKey(i32 keyVersion, string chatMid,  members,  keyIds,  encryptedSharedKeys)")
  fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey registerE2EEPublicKey(i32 reqSeq, E2EEPublicKey publicKey)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey getE2EEPublicKey(string mid, i32 keyVersion, i32 keyId)")
  fmt.Fprintln(os.Stderr, "  RSAKey getRSAKeyInfo(IdentityProvider provider)")
  fmt.Fprintln(os.Stderr, "  RegisterWithSnsIdResult registerWithSnsId(C60759oi snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  SnsIdUserStatus findSnsIdUserStatus(C60759oi snsIdType, string snsAccessToken, string udidHash, string migrationPincodeSessionId, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  ContactRegistration getContactRegistration(string id, ContactType type)")
  fmt.Fprintln(os.Stderr, "  PhoneVerificationResult verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  string acquireEncryptedAccessToken(FeatureType featureType)")
  fmt.Fprintln(os.Stderr, "  string registerWithSnsIdAndIdentityCredential(C60759oi snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  string getShakeEventV1(Geolocation location)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithIdentityCredential(string sessionId, string identifier, string verifier, IdentityProvider provider, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "   updateAndGetNearby(double latitude, double longitude, GeolocationAccuracy accuracy, ClientNetworkStatus networkStatus, double altitudeMeters, double velocityMetersPerSecond, double bearingDegrees)")
  fmt.Fprintln(os.Stderr, "   getFriendRequests(Direction direction, i64 lastSeenSeqId)")
  fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
  fmt.Fprintln(os.Stderr, "  void blockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, ContactType type, string reference)")
  fmt.Fprintln(os.Stderr, "  void requestResendMessage(i32 reqSeq, string senderMid, string messageId)")
  fmt.Fprintln(os.Stderr, "  void sendChatRemoved(i32 seq, string chatMid, string lastMessageId, i32 sessionId)")
  fmt.Fprintln(os.Stderr, "  void respondResendMessage(i32 reqSeq, string receiverMid, string originalMessageId, Message resendMessage, TalkExceptionCode errorCode)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void respondE2EEKeyExchange(i32 reqSeq, string encryptedKeyChain, string hashKeyChain)")
  fmt.Fprintln(os.Stderr, "   syncContacts(i32 reqSeq,  localContacts)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByPhone(i32 reqSeq,  phones, string reference)")
  fmt.Fprintln(os.Stderr, "  void notifySleep(i64 lastRev, i32 badge)")
  fmt.Fprintln(os.Stderr, "  void reportProfile(i64 syncOpRevision, Profile profile)")
  fmt.Fprintln(os.Stderr, "  void notifyUpdated(i64 lastRev, DeviceInfo deviceInfo, string udidHash, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  void reportSettings(i64 syncOpRevision, Settings settings)")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  string openProximityMatch(Location location, ClientNetworkStatus networkStatus)")
  fmt.Fprintln(os.Stderr, "  void removeFriendRequest(Direction direction, string midOrEMid)")
  fmt.Fprintln(os.Stderr, "  void updateNotificationToken(string token, UpdateNotificationTokenType type)")
  fmt.Fprintln(os.Stderr, "  void updateExtendedProfileAttribute(i32 reqSeq, UpdateExtendedProfileAttributeAttr attr, ExtendedProfile extendedProfile)")
  fmt.Fprintln(os.Stderr, "  UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void requestAccountPasswordReset(string identifier, IdentityProvider provider, string locale)")
  fmt.Fprintln(os.Stderr, "  void sendPostback(SendPostbackRequest request)")
  fmt.Fprintln(os.Stderr, "  void tryFriendRequest(string midOrEMid, FriendRequestMethod method, string friendRequestParams)")
  fmt.Fprintln(os.Stderr, "  void acceptProximityMatches(string sessionId,  ids)")
  fmt.Fprintln(os.Stderr, "   getContacts( ids)")
  fmt.Fprintln(os.Stderr, "  void reportDeviceState( booleanState,  stringState)")
  fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  ExtendedProfile getExtendedProfile(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Profile getProfile(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes2( attributesToRetrieve)")
  fmt.Fprintln(os.Stderr, "  ProximityMatchCandidateResult getProximityMatchCandidateList(string sessionId)")
  fmt.Fprintln(os.Stderr, "  PendingAgreementsResponse findAndAddContactByMetaTag(i32 reqSeq, string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "   getMessageReadRange( chatIds, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  bool registerUserid(i32 reqSeq, string searchId)")
  fmt.Fprintln(os.Stderr, "  void reportPushRecvReports(i32 reqSeq,  pushRecvReports)")
  fmt.Fprintln(os.Stderr, "  void noop()")
  fmt.Fprintln(os.Stderr, "   getBlockedRecommendationIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void removeFollower(RemoveFollowerRequest removeFollowerRequest)")
  fmt.Fprintln(os.Stderr, "  void verifyAccountMigration(string migrationSessionId)")
  fmt.Fprintln(os.Stderr, "  Settings getSettings(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getLastE2EEGroupSharedKey(i32 keyVersion, string chatMid)")
  fmt.Fprintln(os.Stderr, "  RingbackTone getRingbackTone()")
  fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
  fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string chatMid, string lastMessageId, i32 sessionId)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "   getAllContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void unfollow(UnfollowRequest unfollowRequest)")
  fmt.Fprintln(os.Stderr, "  void closeProximityMatch(string sessionId)")
  fmt.Fprintln(os.Stderr, "  void inviteFriendsBySms( phoneNumberList)")
  fmt.Fprintln(os.Stderr, "   getChatEffectMetaList( categories)")
  fmt.Fprintln(os.Stderr, "  void removeAllMessages(i32 seq, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "  void unblockContact(i32 reqSeq, string id, string reference)")
  fmt.Fprintln(os.Stderr, "  AnalyticsInfo getAnalyticsInfo()")
  fmt.Fprintln(os.Stderr, "   getRecommendationIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)")
  fmt.Fprintln(os.Stderr, "  bool wakeUpLongPolling(i64 clientRevision)")
  fmt.Fprintln(os.Stderr, "  void unblockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void sendEchoPush(string text)")
  fmt.Fprintln(os.Stderr, "  void verifyAccountMigrationPincode(string migrationPincodeSessionId, string accountMigrationPincode)")
  fmt.Fprintln(os.Stderr, "  void notifyInstalled(string udidHash, string applicationTypeWithExtensions)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcode(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByMetaTag(string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "   findContactsByPhone( phones)")
  fmt.Fprintln(os.Stderr, "  RegisterWithPhoneNumberResult registerWithPhoneNumber(string sessionId, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttribute(i32 reqSeq, ProfileAttribute attr, string value)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttributes(i32 reqSeq, UpdateProfileAttributesRequest request)")
  fmt.Fprintln(os.Stderr, "   updateSettingsAttributes2(i32 reqSeq,  attributesToUpdate, Settings settings)")
  fmt.Fprintln(os.Stderr, "  string decryptFollowEMid(string eMid)")
  fmt.Fprintln(os.Stderr, "  void updateAccountMigrationPincode(string accountMigrationPincode)")
  fmt.Fprintln(os.Stderr, "  bool isUseridAvailable(string searchId)")
  fmt.Fprintln(os.Stderr, "  GetFollowersResponse getFollowers(GetFollowersRequest getFollowersRequest)")
  fmt.Fprintln(os.Stderr, "  string createAccountMigrationPincodeSession()")
  fmt.Fprintln(os.Stderr, "  void resendPinCode(string sessionId)")
  fmt.Fprintln(os.Stderr, "  GetFollowingsResponse getFollowings(GetFollowingsRequest getFollowingsRequest)")
  fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
  fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserTicket(string ticketIdWithTag)")
  fmt.Fprintln(os.Stderr, "  void finishUpdateVerification(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getAcceptedProximityMatches(string sessionId)")
  fmt.Fprintln(os.Stderr, "  void clearRingbackTone()")
  fmt.Fprintln(os.Stderr, "  string unregisterUserAndDevice()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := linethrift.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err608 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err608 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err609 := (strconv.Atoi(flag.Arg(2)))
    if err609 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err610 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err610 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err611 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err611 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updateProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfile requires 2 args")
      flag.Usage()
    }
    tmp0, err612 := (strconv.Atoi(flag.Arg(1)))
    if err612 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg613 := flag.Arg(2)
    mbTrans614 := thrift.NewTMemoryBufferLen(len(arg613))
    defer mbTrans614.Close()
    _, err615 := mbTrans614.WriteString(arg613)
    if err615 != nil {
      Usage()
      return
    }
    factory616 := thrift.NewTJSONProtocolFactory()
    jsProt617 := factory616.GetProtocol(mbTrans614)
    argvalue1 := linethrift.NewProfile()
    err618 := argvalue1.Read(context.Background(), jsProt617)
    if err618 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "fetchOperations":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FetchOperations requires 2 args")
      flag.Usage()
    }
    argvalue0, err619 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err619 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err620 := (strconv.Atoi(flag.Arg(2)))
    if err620 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.FetchOperations(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRecentFriendRequests":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRecentFriendRequests requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRecentFriendRequests(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChats requires 1 args")
      flag.Usage()
    }
    arg621 := flag.Arg(1)
    mbTrans622 := thrift.NewTMemoryBufferLen(len(arg621))
    defer mbTrans622.Close()
    _, err623 := mbTrans622.WriteString(arg621)
    if err623 != nil {
      Usage()
      return
    }
    factory624 := thrift.NewTJSONProtocolFactory()
    jsProt625 := factory624.GetProtocol(mbTrans622)
    argvalue0 := linethrift.NewGetChatsRequest()
    err626 := argvalue0.Read(context.Background(), jsProt625)
    if err626 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetChats(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRecentMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetRecentMessages requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err628 := (strconv.Atoi(flag.Arg(2)))
    if err628 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetRecentMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRecentMessagesV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetRecentMessagesV2 requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err630 := (strconv.Atoi(flag.Arg(2)))
    if err630 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetRecentMessagesV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getCountryWithRequestIp":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCountryWithRequestIp requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCountryWithRequestIp(context.Background()))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncements":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncements requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetChatRoomAnnouncements(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupWithoutMembers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupWithoutMembers requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupWithoutMembers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroups":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroups requires 1 args")
      flag.Usage()
    }
    arg634 := flag.Arg(1)
    mbTrans635 := thrift.NewTMemoryBufferLen(len(arg634))
    defer mbTrans635.Close()
    _, err636 := mbTrans635.WriteString(arg634)
    if err636 != nil { 
      Usage()
      return
    }
    factory637 := thrift.NewTJSONProtocolFactory()
    jsProt638 := factory637.GetProtocol(mbTrans635)
    containerStruct0 := linethrift.NewTalkServiceGetGroupsArgs()
    err639 := containerStruct0.ReadField1(context.Background(), jsProt638)
    if err639 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupIds
    value0 := argvalue0
    fmt.Print(client.GetGroups(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateContactSetting":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
      flag.Usage()
    }
    tmp0, err640 := (strconv.Atoi(flag.Arg(1)))
    if err640 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := linethrift.ContactSetting(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updateGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err643 := (strconv.Atoi(flag.Arg(1)))
    if err643 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg644 := flag.Arg(2)
    mbTrans645 := thrift.NewTMemoryBufferLen(len(arg644))
    defer mbTrans645.Close()
    _, err646 := mbTrans645.WriteString(arg644)
    if err646 != nil {
      Usage()
      return
    }
    factory647 := thrift.NewTJSONProtocolFactory()
    jsProt648 := factory647.GetProtocol(mbTrans645)
    argvalue1 := linethrift.NewGroup()
    err649 := argvalue1.Read(context.Background(), jsProt648)
    if err649 != nil {
      Usage()
      return
    }
    value1 := linethrift.Group(argvalue1)
    fmt.Print(client.UpdateGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getLastE2EEPublicKeys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEPublicKeys requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetLastE2EEPublicKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRingtone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRingtone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRingtone(context.Background()))
    fmt.Print("\n")
    break
  case "negotiateE2EEPublicKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NegotiateE2EEPublicKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.NegotiateE2EEPublicKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactByUserid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "clearRingtone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ClearRingtone requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ClearRingtone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setNotificationsEnabled":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetNotificationsEnabled requires 4 args")
      flag.Usage()
    }
    tmp0, err655 := (strconv.Atoi(flag.Arg(1)))
    if err655 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.MidType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.SetNotificationsEnabled(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "deleteOtherFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteOtherFromChat requires 1 args")
      flag.Usage()
    }
    arg658 := flag.Arg(1)
    mbTrans659 := thrift.NewTMemoryBufferLen(len(arg658))
    defer mbTrans659.Close()
    _, err660 := mbTrans659.WriteString(arg658)
    if err660 != nil {
      Usage()
      return
    }
    factory661 := thrift.NewTJSONProtocolFactory()
    jsProt662 := factory661.GetProtocol(mbTrans659)
    argvalue0 := linethrift.NewDeleteOtherFromChatRequest()
    err663 := argvalue0.Read(context.Background(), jsProt662)
    if err663 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteOtherFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteIntoChat requires 1 args")
      flag.Usage()
    }
    arg664 := flag.Arg(1)
    mbTrans665 := thrift.NewTMemoryBufferLen(len(arg664))
    defer mbTrans665.Close()
    _, err666 := mbTrans665.WriteString(arg664)
    if err666 != nil {
      Usage()
      return
    }
    factory667 := thrift.NewTJSONProtocolFactory()
    jsProt668 := factory667.GetProtocol(mbTrans665)
    argvalue0 := linethrift.NewInviteIntoChatRequest()
    err669 := argvalue0.Read(context.Background(), jsProt668)
    if err669 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InviteIntoChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptChatInvitationByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitationByTicket requires 1 args")
      flag.Usage()
    }
    arg670 := flag.Arg(1)
    mbTrans671 := thrift.NewTMemoryBufferLen(len(arg670))
    defer mbTrans671.Close()
    _, err672 := mbTrans671.WriteString(arg670)
    if err672 != nil {
      Usage()
      return
    }
    factory673 := thrift.NewTJSONProtocolFactory()
    jsProt674 := factory673.GetProtocol(mbTrans671)
    argvalue0 := linethrift.NewAcceptChatInvitationByTicketRequest()
    err675 := argvalue0.Read(context.Background(), jsProt674)
    if err675 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitationByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err676 := (strconv.Atoi(flag.Arg(1)))
    if err676 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AcceptGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteSelfFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteSelfFromChat requires 1 args")
      flag.Usage()
    }
    arg678 := flag.Arg(1)
    mbTrans679 := thrift.NewTMemoryBufferLen(len(arg678))
    defer mbTrans679.Close()
    _, err680 := mbTrans679.WriteString(arg678)
    if err680 != nil {
      Usage()
      return
    }
    factory681 := thrift.NewTJSONProtocolFactory()
    jsProt682 := factory681.GetProtocol(mbTrans679)
    argvalue0 := linethrift.NewDeleteSelfFromChatRequest()
    err683 := argvalue0.Read(context.Background(), jsProt682)
    if err683 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteSelfFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findChatByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindChatByTicket requires 1 args")
      flag.Usage()
    }
    arg684 := flag.Arg(1)
    mbTrans685 := thrift.NewTMemoryBufferLen(len(arg684))
    defer mbTrans685.Close()
    _, err686 := mbTrans685.WriteString(arg684)
    if err686 != nil {
      Usage()
      return
    }
    factory687 := thrift.NewTJSONProtocolFactory()
    jsProt688 := factory687.GetProtocol(mbTrans685)
    argvalue0 := linethrift.NewFindChatByTicketRequest()
    err689 := argvalue0.Read(context.Background(), jsProt688)
    if err689 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FindChatByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancelChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelChatInvitation requires 1 args")
      flag.Usage()
    }
    arg690 := flag.Arg(1)
    mbTrans691 := thrift.NewTMemoryBufferLen(len(arg690))
    defer mbTrans691.Close()
    _, err692 := mbTrans691.WriteString(arg690)
    if err692 != nil {
      Usage()
      return
    }
    factory693 := thrift.NewTJSONProtocolFactory()
    jsProt694 := factory693.GetProtocol(mbTrans691)
    argvalue0 := linethrift.NewCancelChatInvitationRequest()
    err695 := argvalue0.Read(context.Background(), jsProt694)
    if err695 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CancelChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitation requires 1 args")
      flag.Usage()
    }
    arg696 := flag.Arg(1)
    mbTrans697 := thrift.NewTMemoryBufferLen(len(arg696))
    defer mbTrans697.Close()
    _, err698 := mbTrans697.WriteString(arg696)
    if err698 != nil {
      Usage()
      return
    }
    factory699 := thrift.NewTJSONProtocolFactory()
    jsProt700 := factory699.GetProtocol(mbTrans697)
    argvalue0 := linethrift.NewAcceptChatInvitationRequest()
    err701 := argvalue0.Read(context.Background(), jsProt700)
    if err701 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getMessageBoxes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxes requires 2 args")
      flag.Usage()
    }
    arg702 := flag.Arg(1)
    mbTrans703 := thrift.NewTMemoryBufferLen(len(arg702))
    defer mbTrans703.Close()
    _, err704 := mbTrans703.WriteString(arg702)
    if err704 != nil {
      Usage()
      return
    }
    factory705 := thrift.NewTJSONProtocolFactory()
    jsProt706 := factory705.GetProtocol(mbTrans703)
    argvalue0 := linethrift.NewMessageBoxListRequest()
    err707 := argvalue0.Read(context.Background(), jsProt706)
    if err707 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageBoxes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateChat requires 1 args")
      flag.Usage()
    }
    arg708 := flag.Arg(1)
    mbTrans709 := thrift.NewTMemoryBufferLen(len(arg708))
    defer mbTrans709.Close()
    _, err710 := mbTrans709.WriteString(arg708)
    if err710 != nil {
      Usage()
      return
    }
    factory711 := thrift.NewTJSONProtocolFactory()
    jsProt712 := factory711.GetProtocol(mbTrans709)
    argvalue0 := linethrift.NewUpdateChatRequest()
    err713 := argvalue0.Read(context.Background(), jsProt712)
    if err713 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reissueChatTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueChatTicket requires 1 args")
      flag.Usage()
    }
    arg714 := flag.Arg(1)
    mbTrans715 := thrift.NewTMemoryBufferLen(len(arg714))
    defer mbTrans715.Close()
    _, err716 := mbTrans715.WriteString(arg714)
    if err716 != nil {
      Usage()
      return
    }
    factory717 := thrift.NewTJSONProtocolFactory()
    jsProt718 := factory717.GetProtocol(mbTrans715)
    argvalue0 := linethrift.NewReissueChatTicketRequest()
    err719 := argvalue0.Read(context.Background(), jsProt718)
    if err719 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReissueChatTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllChatMids":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllChatMids requires 2 args")
      flag.Usage()
    }
    arg720 := flag.Arg(1)
    mbTrans721 := thrift.NewTMemoryBufferLen(len(arg720))
    defer mbTrans721.Close()
    _, err722 := mbTrans721.WriteString(arg720)
    if err722 != nil {
      Usage()
      return
    }
    factory723 := thrift.NewTJSONProtocolFactory()
    jsProt724 := factory723.GetProtocol(mbTrans721)
    argvalue0 := linethrift.NewGetAllChatMidsRequest()
    err725 := argvalue0.Read(context.Background(), jsProt724)
    if err725 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAllChatMids(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "rejectChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RejectChatInvitation requires 1 args")
      flag.Usage()
    }
    arg726 := flag.Arg(1)
    mbTrans727 := thrift.NewTMemoryBufferLen(len(arg726))
    defer mbTrans727.Close()
    _, err728 := mbTrans727.WriteString(arg726)
    if err728 != nil {
      Usage()
      return
    }
    factory729 := thrift.NewTJSONProtocolFactory()
    jsProt730 := factory729.GetProtocol(mbTrans727)
    argvalue0 := linethrift.NewRejectChatInvitationRequest()
    err731 := argvalue0.Read(context.Background(), jsProt730)
    if err731 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RejectChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateChat requires 1 args")
      flag.Usage()
    }
    arg732 := flag.Arg(1)
    mbTrans733 := thrift.NewTMemoryBufferLen(len(arg732))
    defer mbTrans733.Close()
    _, err734 := mbTrans733.WriteString(arg732)
    if err734 != nil {
      Usage()
      return
    }
    factory735 := thrift.NewTJSONProtocolFactory()
    jsProt736 := factory735.GetProtocol(mbTrans733)
    argvalue0 := linethrift.NewCreateChatRequest()
    err737 := argvalue0.Read(context.Background(), jsProt736)
    if err737 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncementsBulk":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncementsBulk requires 2 args")
      flag.Usage()
    }
    arg738 := flag.Arg(1)
    mbTrans739 := thrift.NewTMemoryBufferLen(len(arg738))
    defer mbTrans739.Close()
    _, err740 := mbTrans739.WriteString(arg738)
    if err740 != nil { 
      Usage()
      return
    }
    factory741 := thrift.NewTJSONProtocolFactory()
    jsProt742 := factory741.GetProtocol(mbTrans739)
    containerStruct0 := linethrift.NewTalkServiceGetChatRoomAnnouncementsBulkArgs()
    err743 := containerStruct0.ReadField1(context.Background(), jsProt742)
    if err743 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatRoomMids
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetChatRoomAnnouncementsBulk(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "startUpdateVerification":
    if flag.NArg() - 1 != 8 {
      fmt.Fprintln(os.Stderr, "StartUpdateVerification requires 8 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.Carrier(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg747 := flag.Arg(5)
    mbTrans748 := thrift.NewTMemoryBufferLen(len(arg747))
    defer mbTrans748.Close()
    _, err749 := mbTrans748.WriteString(arg747)
    if err749 != nil {
      Usage()
      return
    }
    factory750 := thrift.NewTJSONProtocolFactory()
    jsProt751 := factory750.GetProtocol(mbTrans748)
    argvalue4 := linethrift.NewDeviceInfo()
    err752 := argvalue4.Read(context.Background(), jsProt751)
    if err752 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    arg755 := flag.Arg(8)
    mbTrans756 := thrift.NewTMemoryBufferLen(len(arg755))
    defer mbTrans756.Close()
    _, err757 := mbTrans756.WriteString(arg755)
    if err757 != nil {
      Usage()
      return
    }
    factory758 := thrift.NewTJSONProtocolFactory()
    jsProt759 := factory758.GetProtocol(mbTrans756)
    argvalue7 := linethrift.NewSIMInfo()
    err760 := argvalue7.Read(context.Background(), jsProt759)
    if err760 != nil {
      Usage()
      return
    }
    value7 := argvalue7
    fmt.Print(client.StartUpdateVerification(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7))
    fmt.Print("\n")
    break
  case "startVerification":
    if flag.NArg() - 1 != 10 {
      fmt.Fprintln(os.Stderr, "StartVerification requires 10 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.Carrier(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg764 := flag.Arg(5)
    mbTrans765 := thrift.NewTMemoryBufferLen(len(arg764))
    defer mbTrans765.Close()
    _, err766 := mbTrans765.WriteString(arg764)
    if err766 != nil {
      Usage()
      return
    }
    factory767 := thrift.NewTJSONProtocolFactory()
    jsProt768 := factory767.GetProtocol(mbTrans765)
    argvalue4 := linethrift.NewDeviceInfo()
    err769 := argvalue4.Read(context.Background(), jsProt768)
    if err769 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    argvalue7 := flag.Arg(8)
    value7 := argvalue7
    arg773 := flag.Arg(9)
    mbTrans774 := thrift.NewTMemoryBufferLen(len(arg773))
    defer mbTrans774.Close()
    _, err775 := mbTrans774.WriteString(arg773)
    if err775 != nil {
      Usage()
      return
    }
    factory776 := thrift.NewTJSONProtocolFactory()
    jsProt777 := factory776.GetProtocol(mbTrans774)
    argvalue8 := linethrift.NewSIMInfo()
    err778 := argvalue8.Read(context.Background(), jsProt777)
    if err778 != nil {
      Usage()
      return
    }
    value8 := argvalue8
    argvalue9 := flag.Arg(10)
    value9 := argvalue9
    fmt.Print(client.StartVerification(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9))
    fmt.Print("\n")
    break
  case "changeVerificationMethod":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ChangeVerificationMethod requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.Y30(tmp1)
    value1 := argvalue1
    fmt.Print(client.ChangeVerificationMethod(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getEncryptedIdentityV3":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetEncryptedIdentityV3 requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetEncryptedIdentityV3(context.Background()))
    fmt.Print("\n")
    break
  case "getE2EEGroupSharedKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEGroupSharedKey requires 3 args")
      flag.Usage()
    }
    tmp0, err781 := (strconv.Atoi(flag.Arg(1)))
    if err781 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err783 := (strconv.Atoi(flag.Arg(3)))
    if err783 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEGroupSharedKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "registerE2EEGroupKey":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RegisterE2EEGroupKey requires 5 args")
      flag.Usage()
    }
    tmp0, err784 := (strconv.Atoi(flag.Arg(1)))
    if err784 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg786 := flag.Arg(3)
    mbTrans787 := thrift.NewTMemoryBufferLen(len(arg786))
    defer mbTrans787.Close()
    _, err788 := mbTrans787.WriteString(arg786)
    if err788 != nil { 
      Usage()
      return
    }
    factory789 := thrift.NewTJSONProtocolFactory()
    jsProt790 := factory789.GetProtocol(mbTrans787)
    containerStruct2 := linethrift.NewTalkServiceRegisterE2EEGroupKeyArgs()
    err791 := containerStruct2.ReadField3(context.Background(), jsProt790)
    if err791 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Members
    value2 := argvalue2
    arg792 := flag.Arg(4)
    mbTrans793 := thrift.NewTMemoryBufferLen(len(arg792))
    defer mbTrans793.Close()
    _, err794 := mbTrans793.WriteString(arg792)
    if err794 != nil { 
      Usage()
      return
    }
    factory795 := thrift.NewTJSONProtocolFactory()
    jsProt796 := factory795.GetProtocol(mbTrans793)
    containerStruct3 := linethrift.NewTalkServiceRegisterE2EEGroupKeyArgs()
    err797 := containerStruct3.ReadField4(context.Background(), jsProt796)
    if err797 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.KeyIds
    value3 := argvalue3
    arg798 := flag.Arg(5)
    mbTrans799 := thrift.NewTMemoryBufferLen(len(arg798))
    defer mbTrans799.Close()
    _, err800 := mbTrans799.WriteString(arg798)
    if err800 != nil { 
      Usage()
      return
    }
    factory801 := thrift.NewTJSONProtocolFactory()
    jsProt802 := factory801.GetProtocol(mbTrans799)
    containerStruct4 := linethrift.NewTalkServiceRegisterE2EEGroupKeyArgs()
    err803 := containerStruct4.ReadField5(context.Background(), jsProt802)
    if err803 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.EncryptedSharedKeys
    value4 := argvalue4
    fmt.Print(client.RegisterE2EEGroupKey(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "generateUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err804 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err804 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err805 := (strconv.Atoi(flag.Arg(2)))
    if err805 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerE2EEPublicKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterE2EEPublicKey requires 2 args")
      flag.Usage()
    }
    tmp0, err806 := (strconv.Atoi(flag.Arg(1)))
    if err806 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg807 := flag.Arg(2)
    mbTrans808 := thrift.NewTMemoryBufferLen(len(arg807))
    defer mbTrans808.Close()
    _, err809 := mbTrans808.WriteString(arg807)
    if err809 != nil {
      Usage()
      return
    }
    factory810 := thrift.NewTJSONProtocolFactory()
    jsProt811 := factory810.GetProtocol(mbTrans808)
    argvalue1 := linethrift.NewE2EEPublicKey()
    err812 := argvalue1.Read(context.Background(), jsProt811)
    if err812 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterE2EEPublicKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getE2EEPublicKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err814 := (strconv.Atoi(flag.Arg(2)))
    if err814 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err815 := (strconv.Atoi(flag.Arg(3)))
    if err815 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEPublicKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRSAKeyInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRSAKeyInfo requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.IdentityProvider(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRSAKeyInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerWithSnsId":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsId requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.C60759oi(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg819 := flag.Arg(5)
    mbTrans820 := thrift.NewTMemoryBufferLen(len(arg819))
    defer mbTrans820.Close()
    _, err821 := mbTrans820.WriteString(arg819)
    if err821 != nil {
      Usage()
      return
    }
    factory822 := thrift.NewTJSONProtocolFactory()
    jsProt823 := factory822.GetProtocol(mbTrans820)
    argvalue4 := linethrift.NewDeviceInfo()
    err824 := argvalue4.Read(context.Background(), jsProt823)
    if err824 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.RegisterWithSnsId(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "findSnsIdUserStatus":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "FindSnsIdUserStatus requires 5 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.C60759oi(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.FindSnsIdUserStatus(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "getContactRegistration":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetContactRegistration requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.ContactType(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetContactRegistration(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "verifyPhoneNumber":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "VerifyPhoneNumber requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.VerifyPhoneNumber(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "acquireEncryptedAccessToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireEncryptedAccessToken requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.FeatureType(tmp0)
    value0 := argvalue0
    fmt.Print(client.AcquireEncryptedAccessToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerWithSnsIdAndIdentityCredential":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsIdAndIdentityCredential requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.C60759oi(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg838 := flag.Arg(3)
    mbTrans839 := thrift.NewTMemoryBufferLen(len(arg838))
    defer mbTrans839.Close()
    _, err840 := mbTrans839.WriteString(arg838)
    if err840 != nil {
      Usage()
      return
    }
    factory841 := thrift.NewTJSONProtocolFactory()
    jsProt842 := factory841.GetProtocol(mbTrans839)
    argvalue2 := linethrift.NewIdentityCredential()
    err843 := argvalue2.Read(context.Background(), jsProt842)
    if err843 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg846 := flag.Arg(6)
    mbTrans847 := thrift.NewTMemoryBufferLen(len(arg846))
    defer mbTrans847.Close()
    _, err848 := mbTrans847.WriteString(arg846)
    if err848 != nil {
      Usage()
      return
    }
    factory849 := thrift.NewTJSONProtocolFactory()
    jsProt850 := factory849.GetProtocol(mbTrans847)
    argvalue5 := linethrift.NewDeviceInfo()
    err851 := argvalue5.Read(context.Background(), jsProt850)
    if err851 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.RegisterWithSnsIdAndIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "getShakeEventV1":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetShakeEventV1 requires 1 args")
      flag.Usage()
    }
    arg853 := flag.Arg(1)
    mbTrans854 := thrift.NewTMemoryBufferLen(len(arg853))
    defer mbTrans854.Close()
    _, err855 := mbTrans854.WriteString(arg853)
    if err855 != nil {
      Usage()
      return
    }
    factory856 := thrift.NewTJSONProtocolFactory()
    jsProt857 := factory856.GetProtocol(mbTrans854)
    argvalue0 := linethrift.NewGeolocation()
    err858 := argvalue0.Read(context.Background(), jsProt857)
    if err858 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetShakeEventV1(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerDeviceWithIdentityCredential":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithIdentityCredential requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := linethrift.IdentityProvider(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.RegisterDeviceWithIdentityCredential(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "updateAndGetNearby":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "UpdateAndGetNearby requires 7 args")
      flag.Usage()
    }
    argvalue0, err863 := (strconv.ParseFloat(flag.Arg(1), 64))
    if err863 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err864 := (strconv.ParseFloat(flag.Arg(2), 64))
    if err864 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg865 := flag.Arg(3)
    mbTrans866 := thrift.NewTMemoryBufferLen(len(arg865))
    defer mbTrans866.Close()
    _, err867 := mbTrans866.WriteString(arg865)
    if err867 != nil {
      Usage()
      return
    }
    factory868 := thrift.NewTJSONProtocolFactory()
    jsProt869 := factory868.GetProtocol(mbTrans866)
    argvalue2 := linethrift.NewGeolocationAccuracy()
    err870 := argvalue2.Read(context.Background(), jsProt869)
    if err870 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg871 := flag.Arg(4)
    mbTrans872 := thrift.NewTMemoryBufferLen(len(arg871))
    defer mbTrans872.Close()
    _, err873 := mbTrans872.WriteString(arg871)
    if err873 != nil {
      Usage()
      return
    }
    factory874 := thrift.NewTJSONProtocolFactory()
    jsProt875 := factory874.GetProtocol(mbTrans872)
    argvalue3 := linethrift.NewClientNetworkStatus()
    err876 := argvalue3.Read(context.Background(), jsProt875)
    if err876 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4, err877 := (strconv.ParseFloat(flag.Arg(5), 64))
    if err877 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5, err878 := (strconv.ParseFloat(flag.Arg(6), 64))
    if err878 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    argvalue6, err879 := (strconv.ParseFloat(flag.Arg(7), 64))
    if err879 != nil {
      Usage()
      return
    }
    value6 := argvalue6
    fmt.Print(client.UpdateAndGetNearby(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "getFriendRequests":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFriendRequests requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.Direction(tmp0)
    value0 := argvalue0
    argvalue1, err880 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err880 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetFriendRequests(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unsendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err881 := (strconv.Atoi(flag.Arg(1)))
    if err881 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err883 := (strconv.Atoi(flag.Arg(1)))
    if err883 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
      flag.Usage()
    }
    tmp0, err885 := (strconv.Atoi(flag.Arg(1)))
    if err885 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := linethrift.ContactType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "requestResendMessage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestResendMessage requires 3 args")
      flag.Usage()
    }
    tmp0, err888 := (strconv.Atoi(flag.Arg(1)))
    if err888 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestResendMessage(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendChatRemoved":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatRemoved requires 4 args")
      flag.Usage()
    }
    tmp0, err891 := (strconv.Atoi(flag.Arg(1)))
    if err891 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err894 := (strconv.Atoi(flag.Arg(4)))
    if err894 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendChatRemoved(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "respondResendMessage":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RespondResendMessage requires 5 args")
      flag.Usage()
    }
    tmp0, err895 := (strconv.Atoi(flag.Arg(1)))
    if err895 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg898 := flag.Arg(4)
    mbTrans899 := thrift.NewTMemoryBufferLen(len(arg898))
    defer mbTrans899.Close()
    _, err900 := mbTrans899.WriteString(arg898)
    if err900 != nil {
      Usage()
      return
    }
    factory901 := thrift.NewTJSONProtocolFactory()
    jsProt902 := factory901.GetProtocol(mbTrans899)
    argvalue3 := linethrift.NewMessage()
    err903 := argvalue3.Read(context.Background(), jsProt902)
    if err903 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := linethrift.TalkExceptionCode(tmp4)
    value4 := argvalue4
    fmt.Print(client.RespondResendMessage(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "inviteIntoRoom":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoRoom requires 3 args")
      flag.Usage()
    }
    tmp0, err904 := (strconv.Atoi(flag.Arg(1)))
    if err904 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg906 := flag.Arg(3)
    mbTrans907 := thrift.NewTMemoryBufferLen(len(arg906))
    defer mbTrans907.Close()
    _, err908 := mbTrans907.WriteString(arg906)
    if err908 != nil { 
      Usage()
      return
    }
    factory909 := thrift.NewTJSONProtocolFactory()
    jsProt910 := factory909.GetProtocol(mbTrans907)
    containerStruct2 := linethrift.NewTalkServiceInviteIntoRoomArgs()
    err911 := containerStruct2.ReadField3(context.Background(), jsProt910)
    if err911 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoRoom(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "respondE2EEKeyExchange":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RespondE2EEKeyExchange requires 3 args")
      flag.Usage()
    }
    tmp0, err912 := (strconv.Atoi(flag.Arg(1)))
    if err912 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.RespondE2EEKeyExchange(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "syncContacts":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncContacts requires 2 args")
      flag.Usage()
    }
    tmp0, err915 := (strconv.Atoi(flag.Arg(1)))
    if err915 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg916 := flag.Arg(2)
    mbTrans917 := thrift.NewTMemoryBufferLen(len(arg916))
    defer mbTrans917.Close()
    _, err918 := mbTrans917.WriteString(arg916)
    if err918 != nil { 
      Usage()
      return
    }
    factory919 := thrift.NewTJSONProtocolFactory()
    jsProt920 := factory919.GetProtocol(mbTrans917)
    containerStruct1 := linethrift.NewTalkServiceSyncContactsArgs()
    err921 := containerStruct1.ReadField2(context.Background(), jsProt920)
    if err921 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.LocalContacts
    value1 := argvalue1
    fmt.Print(client.SyncContacts(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByPhone":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByPhone requires 3 args")
      flag.Usage()
    }
    tmp0, err922 := (strconv.Atoi(flag.Arg(1)))
    if err922 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg923 := flag.Arg(2)
    mbTrans924 := thrift.NewTMemoryBufferLen(len(arg923))
    defer mbTrans924.Close()
    _, err925 := mbTrans924.WriteString(arg923)
    if err925 != nil { 
      Usage()
      return
    }
    factory926 := thrift.NewTJSONProtocolFactory()
    jsProt927 := factory926.GetProtocol(mbTrans924)
    containerStruct1 := linethrift.NewTalkServiceFindAndAddContactsByPhoneArgs()
    err928 := containerStruct1.ReadField2(context.Background(), jsProt927)
    if err928 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Phones
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByPhone(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "notifySleep":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifySleep requires 2 args")
      flag.Usage()
    }
    argvalue0, err930 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err930 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err931 := (strconv.Atoi(flag.Arg(2)))
    if err931 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.NotifySleep(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reportProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportProfile requires 2 args")
      flag.Usage()
    }
    argvalue0, err932 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err932 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg933 := flag.Arg(2)
    mbTrans934 := thrift.NewTMemoryBufferLen(len(arg933))
    defer mbTrans934.Close()
    _, err935 := mbTrans934.WriteString(arg933)
    if err935 != nil {
      Usage()
      return
    }
    factory936 := thrift.NewTJSONProtocolFactory()
    jsProt937 := factory936.GetProtocol(mbTrans934)
    argvalue1 := linethrift.NewProfile()
    err938 := argvalue1.Read(context.Background(), jsProt937)
    if err938 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ReportProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyUpdated":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "NotifyUpdated requires 4 args")
      flag.Usage()
    }
    argvalue0, err939 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err939 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg940 := flag.Arg(2)
    mbTrans941 := thrift.NewTMemoryBufferLen(len(arg940))
    defer mbTrans941.Close()
    _, err942 := mbTrans941.WriteString(arg940)
    if err942 != nil {
      Usage()
      return
    }
    factory943 := thrift.NewTJSONProtocolFactory()
    jsProt944 := factory943.GetProtocol(mbTrans941)
    argvalue1 := linethrift.NewDeviceInfo()
    err945 := argvalue1.Read(context.Background(), jsProt944)
    if err945 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.NotifyUpdated(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "reportSettings":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportSettings requires 2 args")
      flag.Usage()
    }
    argvalue0, err948 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err948 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg949 := flag.Arg(2)
    mbTrans950 := thrift.NewTMemoryBufferLen(len(arg949))
    defer mbTrans950.Close()
    _, err951 := mbTrans950.WriteString(arg949)
    if err951 != nil {
      Usage()
      return
    }
    factory952 := thrift.NewTJSONProtocolFactory()
    jsProt953 := factory952.GetProtocol(mbTrans950)
    argvalue1 := linethrift.NewSettings()
    err954 := argvalue1.Read(context.Background(), jsProt953)
    if err954 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ReportSettings(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getBlockedContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetBlockedContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "openProximityMatch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "OpenProximityMatch requires 2 args")
      flag.Usage()
    }
    arg955 := flag.Arg(1)
    mbTrans956 := thrift.NewTMemoryBufferLen(len(arg955))
    defer mbTrans956.Close()
    _, err957 := mbTrans956.WriteString(arg955)
    if err957 != nil {
      Usage()
      return
    }
    factory958 := thrift.NewTJSONProtocolFactory()
    jsProt959 := factory958.GetProtocol(mbTrans956)
    argvalue0 := linethrift.NewLocation()
    err960 := argvalue0.Read(context.Background(), jsProt959)
    if err960 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg961 := flag.Arg(2)
    mbTrans962 := thrift.NewTMemoryBufferLen(len(arg961))
    defer mbTrans962.Close()
    _, err963 := mbTrans962.WriteString(arg961)
    if err963 != nil {
      Usage()
      return
    }
    factory964 := thrift.NewTJSONProtocolFactory()
    jsProt965 := factory964.GetProtocol(mbTrans962)
    argvalue1 := linethrift.NewClientNetworkStatus()
    err966 := argvalue1.Read(context.Background(), jsProt965)
    if err966 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.OpenProximityMatch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeFriendRequest":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveFriendRequest requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.Direction(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveFriendRequest(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateNotificationToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.UpdateNotificationTokenType(tmp1)
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateExtendedProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateExtendedProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err969 := (strconv.Atoi(flag.Arg(1)))
    if err969 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.UpdateExtendedProfileAttributeAttr(tmp1)
    value1 := argvalue1
    arg970 := flag.Arg(3)
    mbTrans971 := thrift.NewTMemoryBufferLen(len(arg970))
    defer mbTrans971.Close()
    _, err972 := mbTrans971.WriteString(arg970)
    if err972 != nil {
      Usage()
      return
    }
    factory973 := thrift.NewTJSONProtocolFactory()
    jsProt974 := factory973.GetProtocol(mbTrans971)
    argvalue2 := linethrift.NewExtendedProfile()
    err975 := argvalue2.Read(context.Background(), jsProt974)
    if err975 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateExtendedProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyIdentityCredentialWithResult":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyIdentityCredentialWithResult_ requires 2 args")
      flag.Usage()
    }
    arg976 := flag.Arg(1)
    mbTrans977 := thrift.NewTMemoryBufferLen(len(arg976))
    defer mbTrans977.Close()
    _, err978 := mbTrans977.WriteString(arg976)
    if err978 != nil {
      Usage()
      return
    }
    factory979 := thrift.NewTJSONProtocolFactory()
    jsProt980 := factory979.GetProtocol(mbTrans977)
    argvalue0 := linethrift.NewIdentityCredential()
    err981 := argvalue0.Read(context.Background(), jsProt980)
    if err981 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyIdentityCredentialWithResult_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "requestAccountPasswordReset":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestAccountPasswordReset requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.IdentityProvider(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestAccountPasswordReset(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendPostback":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendPostback requires 1 args")
      flag.Usage()
    }
    arg985 := flag.Arg(1)
    mbTrans986 := thrift.NewTMemoryBufferLen(len(arg985))
    defer mbTrans986.Close()
    _, err987 := mbTrans986.WriteString(arg985)
    if err987 != nil {
      Usage()
      return
    }
    factory988 := thrift.NewTJSONProtocolFactory()
    jsProt989 := factory988.GetProtocol(mbTrans986)
    argvalue0 := linethrift.NewSendPostbackRequest()
    err990 := argvalue0.Read(context.Background(), jsProt989)
    if err990 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendPostback(context.Background(), value0))
    fmt.Print("\n")
    break
  case "tryFriendRequest":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TryFriendRequest requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.FriendRequestMethod(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.TryFriendRequest(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "acceptProximityMatches":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcceptProximityMatches requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg994 := flag.Arg(2)
    mbTrans995 := thrift.NewTMemoryBufferLen(len(arg994))
    defer mbTrans995.Close()
    _, err996 := mbTrans995.WriteString(arg994)
    if err996 != nil { 
      Usage()
      return
    }
    factory997 := thrift.NewTJSONProtocolFactory()
    jsProt998 := factory997.GetProtocol(mbTrans995)
    containerStruct1 := linethrift.NewTalkServiceAcceptProximityMatchesArgs()
    err999 := containerStruct1.ReadField2(context.Background(), jsProt998)
    if err999 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Ids
    value1 := argvalue1
    fmt.Print(client.AcceptProximityMatches(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
      flag.Usage()
    }
    arg1000 := flag.Arg(1)
    mbTrans1001 := thrift.NewTMemoryBufferLen(len(arg1000))
    defer mbTrans1001.Close()
    _, err1002 := mbTrans1001.WriteString(arg1000)
    if err1002 != nil { 
      Usage()
      return
    }
    factory1003 := thrift.NewTJSONProtocolFactory()
    jsProt1004 := factory1003.GetProtocol(mbTrans1001)
    containerStruct0 := linethrift.NewTalkServiceGetContactsArgs()
    err1005 := containerStruct0.ReadField1(context.Background(), jsProt1004)
    if err1005 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reportDeviceState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportDeviceState requires 2 args")
      flag.Usage()
    }
    arg1006 := flag.Arg(1)
    mbTrans1007 := thrift.NewTMemoryBufferLen(len(arg1006))
    defer mbTrans1007.Close()
    _, err1008 := mbTrans1007.WriteString(arg1006)
    if err1008 != nil { 
      Usage()
      return
    }
    factory1009 := thrift.NewTJSONProtocolFactory()
    jsProt1010 := factory1009.GetProtocol(mbTrans1007)
    containerStruct0 := linethrift.NewTalkServiceReportDeviceStateArgs()
    err1011 := containerStruct0.ReadField1(context.Background(), jsProt1010)
    if err1011 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.BooleanState
    value0 := argvalue0
    arg1012 := flag.Arg(2)
    mbTrans1013 := thrift.NewTMemoryBufferLen(len(arg1012))
    defer mbTrans1013.Close()
    _, err1014 := mbTrans1013.WriteString(arg1012)
    if err1014 != nil { 
      Usage()
      return
    }
    factory1015 := thrift.NewTJSONProtocolFactory()
    jsProt1016 := factory1015.GetProtocol(mbTrans1013)
    containerStruct1 := linethrift.NewTalkServiceReportDeviceStateArgs()
    err1017 := containerStruct1.ReadField2(context.Background(), jsProt1016)
    if err1017 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.StringState
    value1 := argvalue1
    fmt.Print(client.ReportDeviceState(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err1018 := (strconv.Atoi(flag.Arg(1)))
    if err1018 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getExtendedProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetExtendedProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetExtendedProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettingsAttributes2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes2 requires 1 args")
      flag.Usage()
    }
    arg1020 := flag.Arg(1)
    mbTrans1021 := thrift.NewTMemoryBufferLen(len(arg1020))
    defer mbTrans1021.Close()
    _, err1022 := mbTrans1021.WriteString(arg1020)
    if err1022 != nil { 
      Usage()
      return
    }
    factory1023 := thrift.NewTJSONProtocolFactory()
    jsProt1024 := factory1023.GetProtocol(mbTrans1021)
    containerStruct0 := linethrift.NewTalkServiceGetSettingsAttributes2Args()
    err1025 := containerStruct0.ReadField1(context.Background(), jsProt1024)
    if err1025 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.AttributesToRetrieve
    value0 := argvalue0
    fmt.Print(client.GetSettingsAttributes2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProximityMatchCandidateList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProximityMatchCandidateList requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetProximityMatchCandidateList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findAndAddContactByMetaTag":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactByMetaTag requires 3 args")
      flag.Usage()
    }
    tmp0, err1027 := (strconv.Atoi(flag.Arg(1)))
    if err1027 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactByMetaTag(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getMessageReadRange":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageReadRange requires 2 args")
      flag.Usage()
    }
    arg1030 := flag.Arg(1)
    mbTrans1031 := thrift.NewTMemoryBufferLen(len(arg1030))
    defer mbTrans1031.Close()
    _, err1032 := mbTrans1031.WriteString(arg1030)
    if err1032 != nil { 
      Usage()
      return
    }
    factory1033 := thrift.NewTJSONProtocolFactory()
    jsProt1034 := factory1033.GetProtocol(mbTrans1031)
    containerStruct0 := linethrift.NewTalkServiceGetMessageReadRangeArgs()
    err1035 := containerStruct0.ReadField1(context.Background(), jsProt1034)
    if err1035 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatIds
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageReadRange(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err1036 := (strconv.Atoi(flag.Arg(1)))
    if err1036 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reportPushRecvReports":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportPushRecvReports requires 2 args")
      flag.Usage()
    }
    tmp0, err1038 := (strconv.Atoi(flag.Arg(1)))
    if err1038 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1039 := flag.Arg(2)
    mbTrans1040 := thrift.NewTMemoryBufferLen(len(arg1039))
    defer mbTrans1040.Close()
    _, err1041 := mbTrans1040.WriteString(arg1039)
    if err1041 != nil { 
      Usage()
      return
    }
    factory1042 := thrift.NewTJSONProtocolFactory()
    jsProt1043 := factory1042.GetProtocol(mbTrans1040)
    containerStruct1 := linethrift.NewTalkServiceReportPushRecvReportsArgs()
    err1044 := containerStruct1.ReadField2(context.Background(), jsProt1043)
    if err1044 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.PushRecvReports
    value1 := argvalue1
    fmt.Print(client.ReportPushRecvReports(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "noop":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Noop requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Noop(context.Background()))
    fmt.Print("\n")
    break
  case "getBlockedRecommendationIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockedRecommendationIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetBlockedRecommendationIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeFollower":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveFollower requires 1 args")
      flag.Usage()
    }
    arg1045 := flag.Arg(1)
    mbTrans1046 := thrift.NewTMemoryBufferLen(len(arg1045))
    defer mbTrans1046.Close()
    _, err1047 := mbTrans1046.WriteString(arg1045)
    if err1047 != nil {
      Usage()
      return
    }
    factory1048 := thrift.NewTJSONProtocolFactory()
    jsProt1049 := factory1048.GetProtocol(mbTrans1046)
    argvalue0 := linethrift.NewRemoveFollowerRequest()
    err1050 := argvalue0.Read(context.Background(), jsProt1049)
    if err1050 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveFollower(context.Background(), value0))
    fmt.Print("\n")
    break
  case "verifyAccountMigration":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "VerifyAccountMigration requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.VerifyAccountMigration(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettings requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getLastE2EEGroupSharedKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEGroupSharedKey requires 2 args")
      flag.Usage()
    }
    tmp0, err1052 := (strconv.Atoi(flag.Arg(1)))
    if err1052 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetLastE2EEGroupSharedKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRingbackTone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRingbackTone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRingbackTone(context.Background()))
    fmt.Print("\n")
    break
  case "leaveRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err1054 := (strconv.Atoi(flag.Arg(1)))
    if err1054 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendChatChecked":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatChecked requires 4 args")
      flag.Usage()
    }
    tmp0, err1056 := (strconv.Atoi(flag.Arg(1)))
    if err1056 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1059 := (strconv.Atoi(flag.Arg(4)))
    if err1059 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findAndAddContactsByUserid":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 3 args")
      flag.Usage()
    }
    tmp0, err1060 := (strconv.Atoi(flag.Arg(1)))
    if err1060 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByUserid(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetAllContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unfollow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unfollow requires 1 args")
      flag.Usage()
    }
    arg1063 := flag.Arg(1)
    mbTrans1064 := thrift.NewTMemoryBufferLen(len(arg1063))
    defer mbTrans1064.Close()
    _, err1065 := mbTrans1064.WriteString(arg1063)
    if err1065 != nil {
      Usage()
      return
    }
    factory1066 := thrift.NewTJSONProtocolFactory()
    jsProt1067 := factory1066.GetProtocol(mbTrans1064)
    argvalue0 := linethrift.NewUnfollowRequest()
    err1068 := argvalue0.Read(context.Background(), jsProt1067)
    if err1068 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unfollow(context.Background(), value0))
    fmt.Print("\n")
    break
  case "closeProximityMatch":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseProximityMatch requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CloseProximityMatch(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteFriendsBySms":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteFriendsBySms requires 1 args")
      flag.Usage()
    }
    arg1070 := flag.Arg(1)
    mbTrans1071 := thrift.NewTMemoryBufferLen(len(arg1070))
    defer mbTrans1071.Close()
    _, err1072 := mbTrans1071.WriteString(arg1070)
    if err1072 != nil { 
      Usage()
      return
    }
    factory1073 := thrift.NewTJSONProtocolFactory()
    jsProt1074 := factory1073.GetProtocol(mbTrans1071)
    containerStruct0 := linethrift.NewTalkServiceInviteFriendsBySmsArgs()
    err1075 := containerStruct0.ReadField1(context.Background(), jsProt1074)
    if err1075 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PhoneNumberList
    value0 := argvalue0
    fmt.Print(client.InviteFriendsBySms(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChatEffectMetaList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChatEffectMetaList requires 1 args")
      flag.Usage()
    }
    arg1076 := flag.Arg(1)
    mbTrans1077 := thrift.NewTMemoryBufferLen(len(arg1076))
    defer mbTrans1077.Close()
    _, err1078 := mbTrans1077.WriteString(arg1076)
    if err1078 != nil { 
      Usage()
      return
    }
    factory1079 := thrift.NewTJSONProtocolFactory()
    jsProt1080 := factory1079.GetProtocol(mbTrans1077)
    containerStruct0 := linethrift.NewTalkServiceGetChatEffectMetaListArgs()
    err1081 := containerStruct0.ReadField1(context.Background(), jsProt1080)
    if err1081 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Categories
    value0 := argvalue0
    fmt.Print(client.GetChatEffectMetaList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeAllMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveAllMessages requires 2 args")
      flag.Usage()
    }
    tmp0, err1082 := (strconv.Atoi(flag.Arg(1)))
    if err1082 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveAllMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockContact":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UnblockContact requires 3 args")
      flag.Usage()
    }
    tmp0, err1084 := (strconv.Atoi(flag.Arg(1)))
    if err1084 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UnblockContact(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAnalyticsInfo":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAnalyticsInfo requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAnalyticsInfo(context.Background()))
    fmt.Print("\n")
    break
  case "getRecommendationIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRecommendationIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := linethrift.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRecommendationIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "notifyRegistrationComplete":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyRegistrationComplete requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyRegistrationComplete(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "wakeUpLongPolling":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WakeUpLongPolling requires 1 args")
      flag.Usage()
    }
    argvalue0, err1089 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1089 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.WakeUpLongPolling(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unblockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err1090 := (strconv.Atoi(flag.Arg(1)))
    if err1090 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err1092 := (strconv.Atoi(flag.Arg(1)))
    if err1092 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1093 := flag.Arg(2)
    mbTrans1094 := thrift.NewTMemoryBufferLen(len(arg1093))
    defer mbTrans1094.Close()
    _, err1095 := mbTrans1094.WriteString(arg1093)
    if err1095 != nil {
      Usage()
      return
    }
    factory1096 := thrift.NewTJSONProtocolFactory()
    jsProt1097 := factory1096.GetProtocol(mbTrans1094)
    argvalue1 := linethrift.NewMessage()
    err1098 := argvalue1.Read(context.Background(), jsProt1097)
    if err1098 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendEchoPush":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendEchoPush requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SendEchoPush(context.Background(), value0))
    fmt.Print("\n")
    break
  case "verifyAccountMigrationPincode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyAccountMigrationPincode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyAccountMigrationPincode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyInstalled":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyInstalled requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyInstalled(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "verifyQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findContactByMetaTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindContactByMetaTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FindContactByMetaTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findContactsByPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactsByPhone requires 1 args")
      flag.Usage()
    }
    arg1108 := flag.Arg(1)
    mbTrans1109 := thrift.NewTMemoryBufferLen(len(arg1108))
    defer mbTrans1109.Close()
    _, err1110 := mbTrans1109.WriteString(arg1108)
    if err1110 != nil { 
      Usage()
      return
    }
    factory1111 := thrift.NewTJSONProtocolFactory()
    jsProt1112 := factory1111.GetProtocol(mbTrans1109)
    containerStruct0 := linethrift.NewTalkServiceFindContactsByPhoneArgs()
    err1113 := containerStruct0.ReadField1(context.Background(), jsProt1112)
    if err1113 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Phones
    value0 := argvalue0
    fmt.Print(client.FindContactsByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerWithPhoneNumber":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterWithPhoneNumber requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterWithPhoneNumber(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err1116 := (strconv.Atoi(flag.Arg(1)))
    if err1116 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := linethrift.ProfileAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateProfileAttributes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttributes requires 2 args")
      flag.Usage()
    }
    tmp0, err1118 := (strconv.Atoi(flag.Arg(1)))
    if err1118 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1119 := flag.Arg(2)
    mbTrans1120 := thrift.NewTMemoryBufferLen(len(arg1119))
    defer mbTrans1120.Close()
    _, err1121 := mbTrans1120.WriteString(arg1119)
    if err1121 != nil {
      Usage()
      return
    }
    factory1122 := thrift.NewTJSONProtocolFactory()
    jsProt1123 := factory1122.GetProtocol(mbTrans1120)
    argvalue1 := linethrift.NewUpdateProfileAttributesRequest()
    err1124 := argvalue1.Read(context.Background(), jsProt1123)
    if err1124 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateProfileAttributes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSettingsAttributes2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttributes2 requires 3 args")
      flag.Usage()
    }
    tmp0, err1125 := (strconv.Atoi(flag.Arg(1)))
    if err1125 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1126 := flag.Arg(2)
    mbTrans1127 := thrift.NewTMemoryBufferLen(len(arg1126))
    defer mbTrans1127.Close()
    _, err1128 := mbTrans1127.WriteString(arg1126)
    if err1128 != nil { 
      Usage()
      return
    }
    factory1129 := thrift.NewTJSONProtocolFactory()
    jsProt1130 := factory1129.GetProtocol(mbTrans1127)
    containerStruct1 := linethrift.NewTalkServiceUpdateSettingsAttributes2Args()
    err1131 := containerStruct1.ReadField2(context.Background(), jsProt1130)
    if err1131 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.AttributesToUpdate
    value1 := argvalue1
    arg1132 := flag.Arg(3)
    mbTrans1133 := thrift.NewTMemoryBufferLen(len(arg1132))
    defer mbTrans1133.Close()
    _, err1134 := mbTrans1133.WriteString(arg1132)
    if err1134 != nil {
      Usage()
      return
    }
    factory1135 := thrift.NewTJSONProtocolFactory()
    jsProt1136 := factory1135.GetProtocol(mbTrans1133)
    argvalue2 := linethrift.NewSettings()
    err1137 := argvalue2.Read(context.Background(), jsProt1136)
    if err1137 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttributes2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "decryptFollowEMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DecryptFollowEMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DecryptFollowEMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateAccountMigrationPincode":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateAccountMigrationPincode requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UpdateAccountMigrationPincode(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isUseridAvailable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsUseridAvailable requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsUseridAvailable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFollowers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFollowers requires 1 args")
      flag.Usage()
    }
    arg1141 := flag.Arg(1)
    mbTrans1142 := thrift.NewTMemoryBufferLen(len(arg1141))
    defer mbTrans1142.Close()
    _, err1143 := mbTrans1142.WriteString(arg1141)
    if err1143 != nil {
      Usage()
      return
    }
    factory1144 := thrift.NewTJSONProtocolFactory()
    jsProt1145 := factory1144.GetProtocol(mbTrans1142)
    argvalue0 := linethrift.NewGetFollowersRequest()
    err1146 := argvalue0.Read(context.Background(), jsProt1145)
    if err1146 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFollowers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createAccountMigrationPincodeSession":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CreateAccountMigrationPincodeSession requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CreateAccountMigrationPincodeSession(context.Background()))
    fmt.Print("\n")
    break
  case "resendPinCode":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ResendPinCode requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ResendPinCode(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFollowings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFollowings requires 1 args")
      flag.Usage()
    }
    arg1148 := flag.Arg(1)
    mbTrans1149 := thrift.NewTMemoryBufferLen(len(arg1148))
    defer mbTrans1149.Close()
    _, err1150 := mbTrans1149.WriteString(arg1148)
    if err1150 != nil {
      Usage()
      return
    }
    factory1151 := thrift.NewTJSONProtocolFactory()
    jsProt1152 := factory1151.GetProtocol(mbTrans1149)
    argvalue0 := linethrift.NewGetFollowingsRequest()
    err1153 := argvalue0.Read(context.Background(), jsProt1152)
    if err1153 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFollowings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getServerTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetServerTime(context.Background()))
    fmt.Print("\n")
    break
  case "getLastOpRevision":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastOpRevision(context.Background()))
    fmt.Print("\n")
    break
  case "findContactByUserTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "finishUpdateVerification":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FinishUpdateVerification requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FinishUpdateVerification(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAcceptedProximityMatches":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAcceptedProximityMatches requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAcceptedProximityMatches(context.Background(), value0))
    fmt.Print("\n")
    break
  case "clearRingbackTone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ClearRingbackTone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ClearRingbackTone(context.Background()))
    fmt.Print("\n")
    break
  case "unregisterUserAndDevice":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnregisterUserAndDevice requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnregisterUserAndDevice(context.Background()))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
